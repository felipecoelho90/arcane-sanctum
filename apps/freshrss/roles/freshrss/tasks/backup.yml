---
# Backup tasks for FreshRSS

- name: Create backup directory
  file:
    path: "{{ backup_dir }}"
    state: directory
    mode: '0755'
  register: dir_create
  failed_when: dir_create.rc != 0

- name: Create backup archive for data
  archive:
    path: "{{ data_dir }}"
    dest: "{{ backup_dir }}/data-{{ backup_filename }}"
    format: gz
    remove: no
  register: data_backup_create
  failed_when: data_backup_create.rc != 0

- name: Create backup archive for configuration
  archive:
    path: "{{ config_dir }}/docker-compose.yml"
    dest: "{{ backup_dir }}/config-{{ backup_filename }}"
    format: gz
    remove: no
  register: config_backup_create
  failed_when: config_backup_create.rc != 0

- name: Verify backup archives
  stat:
    path: "{{ item }}"
  with_items:
    - "{{ backup_dir }}/data-{{ backup_filename }}"
    - "{{ backup_dir }}/config-{{ backup_filename }}"
  register: backup_stat
  failed_when: not backup_stat.results[0].stat.exists or not backup_stat.results[1].stat.exists

- name: Upload data backup to OCI
  shell: |
    oci os object put \
      --bucket-name {{ backup_bucket }} \
      --name data-{{ backup_filename }} \
      --file {{ backup_dir }}/data-{{ backup_filename }}
  args:
    creates: "{{ backup_dir }}/data-{{ backup_filename }}"
  register: data_backup_upload
  failed_when: data_backup_upload.rc != 0
  when: backup_stat.results[0].stat.exists

- name: Upload config backup to OCI
  shell: |
    oci os object put \
      --bucket-name {{ backup_bucket }} \
      --name config-{{ backup_filename }} \
      --file {{ backup_dir }}/config-{{ backup_filename }}"
  args:
    creates: "{{ backup_dir }}/config-{{ backup_filename }}"
  register: config_backup_upload
  failed_when: config_backup_upload.rc != 0
  when: backup_stat.results[1].stat.exists

- name: Verify backup uploads
  shell: |
    oci os object head \
      --bucket-name {{ backup_bucket }} \
      --name {{ item }}
  with_items:
    - "data-{{ backup_filename }}"
    - "config-{{ backup_filename }}"
  register: backup_verify
  failed_when: backup_verify.rc != 0
  when: backup_stat.results[0].stat.exists and backup_stat.results[1].stat.exists

- name: Clean up old backups
  file:
    path: "{{ backup_dir }}/{{ item }}"
    state: absent
  with_fileglob:
    - "{{ backup_dir }}/data-freshrss-backup-*.tar.gz"
    - "{{ backup_dir }}/config-freshrss-backup-*.tar.gz"
  when: item != "data-{{ backup_filename }}" and item != "config-{{ backup_filename }}"
  register: cleanup_result
  failed_when: cleanup_result.rc != 0 